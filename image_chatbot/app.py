import os
from flask import Flask, request, render_template, redirect, url_for
from werkzeug.utils import secure_filename
import numpy as np
from PIL import Image
import tensorflow as tf

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask
app = Flask(__name__)

# T·∫£i m√¥ h√¨nh nh·∫≠n d·∫°ng h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán s·∫µn
model = tf.keras.applications.MobileNetV2(weights='imagenet')

# C·∫•u h√¨nh th∆∞ m·ª•c ƒë·ªÉ t·∫£i ·∫£nh l√™n
UPLOAD_FOLDER = 'static/uploads/'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# H√†m x·ª≠ l√Ω v√† d·ª± ƒëo√°n h√¨nh ·∫£nh
def predict_image(image_path):
    try:
        img = Image.open(image_path).resize((224, 224))
        # Chuy·ªÉn ·∫£nh sang ƒë·ªãnh d·∫°ng RGB n·∫øu l√† ·∫£nh GIF ho·∫∑c c√≥ k√™nh alpha
        if img.mode != 'RGB':
            img = img.convert('RGB')

        img_array = tf.keras.preprocessing.image.img_to_array(img)
        img_array = tf.expand_dims(img_array, 0)
        img_array = tf.keras.applications.mobilenet_v2.preprocess_input(img_array)

        predictions = model.predict(img_array)
        decoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=3)[0]

        return decoded_predictions
    except Exception as e:
        print(f"L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
        return None

# Trang ch·ªß v√† x·ª≠ l√Ω vi·ªác t·∫£i ·∫£nh l√™n
@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        if 'file' not in request.files:
            return redirect(request.url)

        file = request.files['file']

        if file.filename == '':
            return redirect(request.url)

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            predictions = predict_image(filepath)
            if predictions:
                result = [(label.replace('_', ' ').title(), f"{prob*100:.2f}%") for (_, label, prob) in predictions]
                return render_template('index.html', filename=filename, predictions=result)
            else:
                error_message = "Kh√¥ng th·ªÉ x·ª≠ l√Ω t·ªáp ·∫£nh n√†y. Vui l√≤ng th·ª≠ m·ªôt ·∫£nh kh√°c."
                return render_template('index.html', error=error_message)
        else:
            error_message = "T·ªáp kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªâ t·∫£i l√™n t·ªáp ·∫£nh (.png, .jpg, .jpeg, .gif)."
            return render_template('index.html', error=error_message)

    return render_template('index.html')

# Route ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
@app.route('/uploads/<filename>')
def send_file(filename):
    return redirect(url_for('static', filename='uploads/' + filename), code=301)


if __name__ == '__main__':
    # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt n·∫øu ch∆∞a t·ªìn t·∫°i
    if not os.path.exists(UPLOAD_FOLDER):
        os.makedirs(UPLOAD_FOLDER)
    app.run(debug=True)

    import streamlit as st
from PIL import Image
import tensorflow as tf
import numpy as np

# S·ª≠ d·ª•ng cache ƒë·ªÉ kh√¥ng ph·∫£i t·∫£i l·∫°i m√¥ h√¨nh m·ªói l·∫ßn ch·∫°y
@st.cache_resource
def load_model():
    model = tf.keras.applications.MobileNetV2(weights='imagenet')
    return model

model = load_model()

# H√†m d·ª± ƒëo√°n (g·∫ßn nh∆∞ kh√¥ng ƒë·ªïi)
def predict_image(image):
    # Chuy·ªÉn ·∫£nh sang ƒë·ªãnh d·∫°ng RGB n·∫øu c·∫ßn
    if image.mode != 'RGB':
        image = image.convert('RGB')
        
    # X·ª≠ l√Ω ·∫£nh ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·∫ßu v√†o c·ªßa m√¥ h√¨nh
    img_resized = image.resize((224, 224))
    img_array = tf.keras.preprocessing.image.img_to_array(img_resized)
    img_array = tf.expand_dims(img_array, 0)
    img_array = tf.keras.applications.mobilenet_v2.preprocess_input(img_array)

    # Th·ª±c hi·ªán d·ª± ƒëo√°n
    predictions = model.predict(img_array)
    decoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=3)[0]
    
    return decoded_predictions

# --- B·∫Øt ƒë·∫ßu x√¢y d·ª±ng giao di·ªán ---

st.set_page_config(page_title="Bot Nh·∫≠n D·∫°ng ·∫¢nh", page_icon="ü§ñ")

st.title("ü§ñ Chatbot Nh·∫≠n D·∫°ng H√¨nh ·∫¢nh")
st.write("T·∫£i l√™n m·ªôt b·ª©c ·∫£nh v√† t√¥i s·∫Ω cho b·∫°n bi·∫øt t√¥i th·∫•y g√¨ trong ƒë√≥!")

# T·∫°o th√†nh ph·∫ßn ƒë·ªÉ ng∆∞·ªùi d√πng t·∫£i file l√™n
uploaded_file = st.file_uploader(
    "Ch·ªçn m·ªôt t·ªáp ·∫£nh...", 
    type=["jpg", "jpeg", "png"]
)

if uploaded_file is not None:
    # ƒê·ªçc v√† hi·ªÉn th·ªã ·∫£nh ng∆∞·ªùi d√πng t·∫£i l√™n
    image = Image.open(uploaded_file)
    st.image(image, caption="·∫¢nh b·∫°n ƒë√£ t·∫£i l√™n.", use_column_width=True)

    st.write("") # Th√™m m·ªôt kho·∫£ng tr·ªëng

    # Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω v√† th·ª±c hi·ªán d·ª± ƒëo√°n
    with st.spinner("Bot ƒëang ph√¢n t√≠ch... üïµÔ∏è"):
        predictions = predict_image(image)

    st.success("ƒê√¢y l√† nh·ªØng g√¨ t√¥i d·ª± ƒëo√°n!")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    for i, (_, label, prob) in enumerate(predictions):
        st.write(f"**D·ª± ƒëo√°n {i+1}:** `{label.replace('_', ' ').title()}` - ƒê·ªô ch√≠nh x√°c: `{prob*100:.2f}%`")